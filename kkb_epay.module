<?php

/**
 * @file kkb_epay.module
 *   KKB 'Epay' authorization server support.
 */

/**
 * Prepares a complete valid form element ready to be submitted to the
 * authorization server.
 *
 * Form is prepared and returned in a form of Drupal's renderable array.
 * The caller party is free to modify the form before rendering it. The most
 * common reason to modify the form is to add/modify submit buttons or some
 * textual annotations.
 *
 * @warning
 *   The returned form is not a complete Drupal form that can be submitted back
 *   to the site and handled by drupal_build_form() function. This form must
 *   be submitted directly to the authorization server.
 *
 * @param KkbEpay_Order $order
 *   Information about order that must be payed.
 *
 * @param object $account
 *   Account of a user who recieves the billing statement. Account is used to
 *   get user email and prefered language.
 *
 * @todo
 *   Set interface language to user's prefered language.
 *
 * @return
 *   Complete definition of a billing form in a form of a renderable array.
 */
function kkb_epay_create_billing_statement(KkbEpay_Order $order, $account) {
  module_load_include('inc', 'kkb_epay', 'billing');

  $form = array();
  $form['#type'] = 'form';
  $form['#action'] = kkb_epay_payment_form_submit_url();

  $form['Signed_Order_64'] = array(
    '#type' => 'hidden',
    '#value' => base64_encode(kkb_epay_create_signed_order($order)),
  );
  $form['email'] = array(
    '#type' => 'hidden',
    '#value' => $account->mail,
  );
  $form['BackLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/back/success/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['FailureBackLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/back/failure/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['PostLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/post/success/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['FailurePostLink'] = array(
    '#type' => 'hidden',
    '#value' => url('epay/post/failure/' . $order->getId(), array('absolute' => TRUE)),
  );
  $form['appendix'] = array(
    '#type' => 'hidden',
    '#value' => '', // FIXME
  ),

  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Proceed to payment'),
    ),
  );

  return $form;
}

/**
 * Returns the current debugging status.
 *
 * @return boolean
 *   TRUE if debugging mode is turned on.
 *   FALSE if debugging mode is turned off.
 */
function kkb_epay_debug_status() {
  return (bool) variable_get('kkb_epay_debug_status', FALSE);
}

/**
 * Implements hook_init().
 */
function kkb_epay_init() {
  if (kkb_epay_debug_status()) {
    drupal_set_message(t('KKB Epay debugging mode is turned on. All payments will be successful, but clients will not be billed.'), 'warning');
  }
}

/**
 * Implements hook_menu().
 */
function kkb_epay_menu() {
  $items = array();

  $items['admin/config/services/epay'] = array(
    'title'            => 'KKB Epay',
    'description'      => t('KKB Epay payments gateway configuration.'),
    'page callback'    => 'system_admin_menu_block_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/debug'] = array(
    'title'            => 'KKB Epay debugging mode',
    'description'      => t('Choose to send payments to a live gateway or a sandbox.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('kkb_epay_admin_debug_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'kkb_epay.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/private-key'] = array(
    'title'            => 'KKB Epay private key configuration',
    'description'      => t('Check the existing or add a new private key.'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('kkb_epay_admin_private_key_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'kkb_epay.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/epay/save-private-key'] = array(
    'title'            => 'KKB Epay private key configuration',
    'description'      => t('Save imported private key into configuration file.'),
    'page callback'    => 'kkb_epay_admin_private_key_save_page',
    'access callback'  => 'user_access',
    'access arguments' => array('administer kkb_epay'),
    'file'             => 'kkb_epay.admin.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/back/success/%'] = array(
    'title'            => 'Payment was successful',
    'page callback'    => 'kkb_epay_callback_back_success',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/back/failure/%'] = array(
    'title'            => 'Payment failed',
    'page callback'    => 'kkb_epay_callback_back_failure',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/post/success/%'] = array(
    'page callback'    => 'kkb_epay_callback_post_success',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['epay/post/failure/%'] = array(
    'page callback'    => 'kkb_epay_callback_post_failure',
    'page arguments'   => array(3),
    'access callback'  => TRUE,
    'file'             => 'callbacks.inc',
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function kkb_epay_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['kkb_epay_merchant_data'] = array(
    'template' => 'templates/merchant-data.tpl.php',
    'variables' => array(
      'amount' => '',
      'certificate_id' => '',
      'currency' => '',
      'merchant_id' => '',
      'merchant_name' => '',
      'order_id' => '',
    ),
  );

  $hooks['kkb_epay_signed_order'] = array(
    'template' => 'templates/signed-order.tpl.php',
    'variables' => array(
      'merchant' => '',
      'signature' => '',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_permission().
 */
function kkb_epay_permission() {
  return array(
    'administer kkb_epay' => array(
      'title' => t('Administer KKB Epay configuration'),
      'description' => t('Manage private keys and payments debugging mode.'),
      'restrict access' => TRUE,
    ),
  );
}

