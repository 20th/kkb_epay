<?php

/**
 * @file kkb_epay.module
 *   KKB 'Epay' authorization server support.
 */

/**
 * Prepares a complete valid form element ready to be submitted to the
 * authorization server.
 *
 * Form is prepared and returned in a form of Drupal's renderable array.
 * The caller party is free to modify the form before rendering it. The most
 * common reason to modify the form is to add/modify submit buttons or some
 * textual annotations.
 *
 * @warning
 *   The returned form is not a complete Drupal form that can be submitted back
 *   to the site and handled by drupal_build_form() function. This form must
 *   be submitted directly to the authorization server.
 *
 * @return
 *   Complete definition of a billing form in a form of a renderable array.
 */
function kkb_epay_create_billing_statement() {
  $form = array();

  return $form;
}

/**
 * Implements hook_menu().
 */
function kkb_epay_menu() {
  $items = array();

  return $items;
}

/**
 * Implements hook_theme().
 */
function kkb_epay_theme($existing, $type, $theme, $path) {
  $hooks = array();

  return $hooks;
}

/**
 * Signes a message with the default key.
 *
 * @return string|NULL
 *   Returnes NULL if any errors happen. Otherwise, returns base64-encoded
 *   signature.
 */
function kkb_epay_sign_message($message) {
  $loader = new KkbEpay_DrupalKeyLoader();
  $loader->setDebug(kkb_epay_debug_status());

  if (!$loader->verifyKey()) {
    drupal_set_message(t('Private key could not be loaded. Message will not be signed.'), 'error');
    return NULL;
  }

  $sign = new KkbEpay_Sign($loader->getKey());
  try {
    return $sign->sign64($message);
  }
  catch (KkbEpay_Exception $ex) {
    return NULL;
  }
}

/**
 * Checks a message signature with the default certificate.
 *
 * @param text $message
 *   Message whose signature must be verified.
 *
 * @param text $signature
 *   Base64-encoded signature of the message.
 *
 * @return boolean
 *   TRUE if signature was check without errors.
 *   FALSE otherwise.
 */
function kkb_epay_check_signature($message, $signature) {
  $certificate = new KkbEpay_DefaultBankCertificate();
  try {
    $checker = new KkbEpay_Checker($certificate);
    return $checker->check64($message, $signature);
  }
  catch (KkbEpay_Exception $ex) {
    return FALSE;
  }
  return FALSE;
}

/**
 * Returnes the current debugging status.
 *
 * @return boolean
 *   TRUE if debugging mode is turned on.
 *   FALSE if debugging mode is turned off.
 */
function kkb_epay_debug_status() {
  return (bool) variable_get('kkb_epay_debug_status', FALSE);
}

