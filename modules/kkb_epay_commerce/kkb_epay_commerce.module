<?php

/**
 * @file
 * Integration of kkb_epay module with Drupal Commerce payment system.
 *
 * Copyright (C) 2013, Victor Nikulshin
 *
 * This file is part of KKB Epay.
 *
 * KKB Epay is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * KKB Epay is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KKB Epay.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function kkb_epay_commerce_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['kkb_epay_commerce'] = array(
    'title' => t('KKB Epay'),
    'description' => t('KKB Epay credit card processing center'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'terminal' => FALSE,
  );

  return $payment_methods;
}

/**
 * Commerce payment method redirection form callback.
 */
function kkb_epay_commerce_redirect_form($form, &$form_state, $order, $payment_method) {
  global $user;

  $order_item_name = t('Order #@order_id on @sitename', array('@order_id' => $order->id, '@sitename' => variable_get('site_name')));
  $amount = $order->commerce_order_total['und'][0]['amount'];

  $kkb_order = new KkbEpay_Order($order->order_id);
  $kkb_order->setTengeAmount($amount);
  $kkb_order->addItem(new KkbEpay_OrderItem($order_item_name, $amount));

  $form = kkb_epay_billing_statement($form, $form_state, $kkb_order, $user);
  return $form;
}

/**
 * Implements hook_kkb_epay_success_page().
 */
function kkb_epay_commerce_kkb_epay_success_page($id) {
  global $user;

  if ($id && ($order = commerce_order_load(intval($id))) && $order->uid == $user->uid) {
    drupal_set_message(t('Thank you, you payment was successfully accepted.'));
    commerce_payment_redirect_pane_next_page($order);

    if (!($balance = commerce_payment_order_balance($order)) || $balance->amount != 0) {
      $warning = t('Unfortunately, the processing center has not yet send us a confirmation of your payment. This may happen because of some technical problems. Please inform the site administrator.');
      drupal_set_message($warning, 'warning');

      $alert = 'A user has finished order checkout without confirmation of successful payment from Epay gateway. It is possible that the user has never payed the order and directly returned to the success landing page. Order ID: %order_id';
      watchdog('kkb_epay', $alert, array('%order_id' => $order->order_id), WATCHDOG_ALERT, 'admin/commerce/orders/' . $order->order_id);
    }
    drupal_goto('checkout/' . $order->order_id);
  }
}

/**
 * Implements hook_kkb_epay_failure_page().
 */
function kkb_epay_commerce_kkb_epay_failure_page($id) {
  global $user;

  if ($id && ($order = commerce_order_load(intval($id))) && $order->uid == $user->uid) {
    drupal_set_message(t('Unfortunately your payment was not completed.'));
    commerce_payment_redirect_pane_previous_page($order);
    drupal_goto('checkout/' . $order->order_id);
  }
}

/**
 * Implements hook_kkb_epay_payment().
 */
function kkb_epay_uc_kkb_epay_payment(KkbEpay_PaymentNotification $notification) {
  // FIXME stub.
}
